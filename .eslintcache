[{"E:\\web dev\\React\\React-Projects\\portfolio\\src\\index.js":"1","E:\\web dev\\React\\React-Projects\\portfolio\\src\\App.js":"2","E:\\web dev\\React\\React-Projects\\portfolio\\src\\reportWebVitals.js":"3","E:\\web dev\\React\\React-Projects\\portfolio\\src\\Home.jsx":"4","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Unity\\UnityManager.jsx":"5","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\NavBar.jsx":"6","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\AStar\\PathFinding.jsx":"7","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingManager.jsx":"8","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\WebPortfolio\\WebPortfolio.jsx":"9","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieHome.jsx":"10","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Unity\\SlideFunctions.jsx":"11","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Unity\\VideoTemplate.jsx":"12","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\BubbleSort.jsx":"13","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Home\\HomeData.jsx":"14","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\HeapSort.jsx":"15","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\MergeSort.jsx":"16","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\QuickSort.jsx":"17","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\MovieList.jsx":"18","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\SearchArea.jsx":"19","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\MovieInfo.jsx":"20","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\Pagination.jsx":"21","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\AStar\\NodeGraph.jsx":"22","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\AStar\\AStar.jsx":"23","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\WebPortfolio\\CreateProject.jsx":"24","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\Movie.jsx":"25"},{"size":460,"mtime":1608943152346,"results":"26","hashOfConfig":"27"},{"size":227,"mtime":1616078481209,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":8796,"mtime":1649121367536,"results":"30","hashOfConfig":"27"},{"size":4364,"mtime":1666238208657,"results":"31","hashOfConfig":"27"},{"size":3496,"mtime":1649138082286,"results":"32","hashOfConfig":"27"},{"size":21734,"mtime":1620202188618,"results":"33","hashOfConfig":"27"},{"size":18627,"mtime":1649138434009,"results":"34","hashOfConfig":"27"},{"size":3216,"mtime":1667427581592,"results":"35","hashOfConfig":"27"},{"size":5365,"mtime":1667427721897,"results":"36","hashOfConfig":"27"},{"size":1366,"mtime":1620203924223,"results":"37","hashOfConfig":"27"},{"size":818,"mtime":1620216101850,"results":"38","hashOfConfig":"27"},{"size":594,"mtime":1610285440836,"results":"39","hashOfConfig":"27"},{"size":2391,"mtime":1667422158437,"results":"40","hashOfConfig":"27"},{"size":2072,"mtime":1616080914573,"results":"41","hashOfConfig":"27"},{"size":3108,"mtime":1620202974788,"results":"42","hashOfConfig":"27"},{"size":1479,"mtime":1610292027287,"results":"43","hashOfConfig":"27"},{"size":755,"mtime":1610678679862,"results":"44","hashOfConfig":"27"},{"size":607,"mtime":1610678680227,"results":"45","hashOfConfig":"27"},{"size":2254,"mtime":1616081109334,"results":"46","hashOfConfig":"27"},{"size":3302,"mtime":1616080283921,"results":"47","hashOfConfig":"27"},{"size":531,"mtime":1610664973039,"results":"48","hashOfConfig":"27"},{"size":5333,"mtime":1616078873128,"results":"49","hashOfConfig":"27"},{"size":746,"mtime":1667423360962,"results":"50","hashOfConfig":"27"},{"size":1450,"mtime":1616080890409,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"gsjrph",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"E:\\web dev\\React\\React-Projects\\portfolio\\src\\index.js",[],["110","111"],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\App.js",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\reportWebVitals.js",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\Home.jsx",["112","113"],"import React, { Component } from \"react\";\r\n\r\n//import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n//import { Input, Menu, Segment } from \"semantic-ui-react\";\r\n//import pic1 from \"./Pictures/sortingvisualizer.png\";\r\n\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { NavBar } from \"./components/NavBar.jsx\";\r\nimport SortingManager from \"./components/SortingVisualizer/SortingManager.jsx\";\r\nimport PathFinding from \"./components/AStar/PathFinding.jsx\";\r\nimport MovieHome from \"./components/MovieAPI/MovieHome.jsx\";\r\nimport HomeData from \"./components/Home/HomeData\";\r\nimport UnityManager from \"./components/Unity/UnityManager.jsx\";\r\nimport WebPortfolio from \"./components/WebPortfolio/WebPortfolio.jsx\";\r\n\r\nimport \"./Style/SortingVisualizer.css\"; // my css\r\n\r\nlet width = window.innerWidth;\r\nlet limit = 900;\r\nlet limitS = \"900\";\r\n\r\nconst divStyle = {\r\n  color: \"white\",\r\n};\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  handleEntailmentRequest = (e) => {\r\n    /*window.open(\r\n      \"https://support.wwf.org.uk/earth_hour/index.php?type=individual\",\r\n      \"_blank\" // <- This is what makes it open in a new window.\r\n    );*/\r\n    window.location.assign(\"https://github.com/xavierpurcell\");\r\n  };\r\n\r\n  render() {\r\n    if (width < limit) {\r\n      return (\r\n        <div>\r\n          <h2 style={divStyle}>\r\n            Please Use a Screen that has a Width > {\"\" + limit}\r\n          </h2>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Router basename=\"/\">\r\n          <NavBar />\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <HomeData />\r\n            </Route>\r\n            <Route exact path=\"/sortingvisualizer\">\r\n              <SortingManager />\r\n            </Route>\r\n            <Route exact path=\"/pathfinding\">\r\n              <PathFinding />\r\n            </Route>\r\n            <Route exact path=\"/moviesearchapi\">\r\n              <MovieHome />\r\n            </Route>\r\n            <Route exact path=\"/unity\">\r\n              <UnityManager />\r\n            </Route>\r\n            <Route exact path=\"/WebPortfolio\">\r\n              <WebPortfolio />\r\n            </Route>\r\n            <Route exact path=\"/GitHub\">\r\n              {this.handleEntailmentRequest}\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n/*\r\n\r\n <p style={{ color: \"white\", padding: \"50px\", fontSize: \"20px\" }}>\r\n                I created this site to learn Javascript and React. Here you can\r\n                find a few different projects I've created.\r\n              </p>\r\n              <div\r\n                className=\"ui three column grid blackBC\"\r\n                style={{ maxWidth: \"1480px\", margin: \"auto\" }}\r\n              >\r\n                <div className=\"column black\" style={{ maxWidth: \"100%\" }}>\r\n                  <div>\r\n                    A Sorting visualizer. It features merge sort, quick sort,\r\n                    heap sort and bubble sort.\r\n                    <p\r\n                      style={{\r\n                        position: \"absolute\",\r\n                        top: \"50%\",\r\n                        width: \"100%\",\r\n                        fontSize: \"30px\",\r\n                        backgroundColor: \"black\",\r\n                      }}\r\n                    >\r\n                      Sorting Visualizer\r\n                    </p>\r\n                    <img src={pic1} style={{ maxWidth: \"100%\" }}></img>\r\n                  </div>\r\n                </div>\r\n                <div className=\"column black\" style={{ maxWidth: \"100%\" }}>\r\n                  <img src={pic1} style={{ maxWidth: \"100%\" }}></img>\r\n                </div>\r\n                <div className=\"column black\" style={{ maxWidth: \"100%\" }}>\r\n                  <img\r\n                    src=\"https://mined-gatech.github.io/EAB-AM-Project/img/316L_AM_IPF.png\"\r\n                    style={{ maxWidth: \"100%\" }}\r\n                  ></img>\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"ui three column grid blackBC\"\r\n                style={{ maxWidth: \"1480px\", margin: \"auto\" }}\r\n              >\r\n                <div className=\"column black\" style={{ maxWidth: \"100%\" }}>\r\n                  <div>\r\n                    A Sorting visualizer. It features merge sort, quick sort,\r\n                    heap sort and bubble sort.\r\n                    <p style={{ position: \"absolute\" }}>sss</p>\r\n                    <img\r\n                      src=\"https://media.geeksforgeeks.org/wp-content/uploads/20200619155542/sorting_quick_sort.png\"\r\n                      style={{ maxWidth: \"100%\" }}\r\n                    ></img>\r\n                  </div>\r\n                </div>\r\n                <div className=\"column black\" style={{ maxWidth: \"100%\" }}>\r\n                  <img\r\n                    src=\"https://mined-gatech.github.io/EAB-AM-Project/img/316L_AM_IPF.png\"\r\n                    style={{ maxWidth: \"100%\" }}\r\n                  ></img>\r\n                </div>\r\n                <div className=\"column black\" style={{ maxWidth: \"100%\" }}>\r\n                  <img\r\n                    src=\"https://mined-gatech.github.io/EAB-AM-Project/img/316L_AM_IPF.png\"\r\n                    style={{ maxWidth: \"100%\" }}\r\n                  ></img>\r\n                </div>\r\n              </div>\r\n\r\n              */\r\n\r\n/*\r\n\r\n              if (\r\n                this.homeChecker() === \"home\" ||\r\n                this.homeChecker() === \"/\" ||\r\n                this.homeChecker() === \"Home\" ||\r\n                this.homeChecker() === \"XavierPurcell\" ||\r\n                this.homeChecker() === \"Xavier Purcell\"\r\n              ) {\r\n                document.title = \"Xavier Purcell\";\r\n              } else {\r\n                //console.log(this.homeChecker());\r\n              }\r\n              */\r\n/*\r\n\r\nhomeChecker() {\r\n    // make page active whnen we go directly to there this was a quick fix need work\r\n    let location = window.location.href;\r\n    let counter = -1;\r\n    let counterArray = [];\r\n    for (let i = 0; i < location.length; i++) {\r\n      if (location[i] === \"/\") {\r\n        counter++;\r\n        counterArray.push([i]);\r\n      }\r\n    }\r\n\r\n    let startPoint = counterArray[counter];\r\n\r\n    let locationString = \"\";\r\n    let falsey = false;\r\n    for (let i = startPoint; i < location.length; i++) {\r\n      if (falsey === true) {\r\n        locationString = locationString.concat(location[i]);\r\n      } else {\r\n        falsey = true;\r\n      }\r\n    }\r\n\r\n    if (locationString === \"\" || locationString === \"/\") {\r\n      locationString = \"home\";\r\n    }\r\n\r\n    let tempLocationString = locationString;\r\n\r\n    for (let i = 0; i < location.length; i++) {\r\n      if (location[i] !== \"#\") {\r\n        locationString = \"Home\";\r\n      } else if (location[i] === \"#\") {\r\n        locationString = tempLocationString;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return locationString;\r\n  }\r\n\r\n  */\r\n\r\n/*\r\n  <NavBar\r\n            activeItem1={activeItem}\r\n            handleItemClickPass={this.handleItemClick}\r\n            handleItemClickNormalPass={this.handleItemClickNormal}\r\n          />\r\n\r\n\r\n  */\r\n\r\n/*\r\n\r\n // make page active whnen we go directly to there this was a quick fix need work\r\n    let location = window.location.href;\r\n    let counter = -1;\r\n    let counterArray = [];\r\n    for (let i = 0; i < location.length; i++) {\r\n      if (location[i] === \"/\") {\r\n        counter++;\r\n        counterArray.push([i]);\r\n      }\r\n    }\r\n\r\n    let startPoint = counterArray[counter];\r\n\r\n    let locationString = \"\";\r\n    let falsey = false;\r\n    for (let i = startPoint; i < location.length; i++) {\r\n      if (falsey === true) {\r\n        locationString = locationString.concat(location[i]);\r\n      } else {\r\n        falsey = true;\r\n      }\r\n    }\r\n\r\n    if (locationString === \"\" || locationString === \"/\") {\r\n      locationString = \"home\";\r\n    }\r\n\r\n    let tempLocationString = locationString;\r\n\r\n    for (let i = 0; i < location.length; i++) {\r\n      if (location[i] !== \"#\") {\r\n        locationString = \"Home\";\r\n      } else if (location[i] === \"#\") {\r\n        locationString = tempLocationString;\r\n        break;\r\n      }\r\n    }\r\n    //console.log(locationString);\r\n    // end of quick fix\r\n\r\n    this.state = {\r\n      activeItem: locationString,\r\n    };\r\n\r\n          */\r\n\r\n/* const {active} = this.state; */\r\n\r\n/*\r\n\r\n\r\n\r\n  handleItemClick = (e, { name }) => {\r\n    let result = name.split(\" \").join(\"\");\r\n\r\n    //console.log(result);\r\n    this.setState({ activeItem: result });\r\n  };\r\n\r\n  handleItemClickNormal = (e, { name }) => {\r\n    let result = name.split(\" \").join(\"\");\r\n    //result = \"\" + result;\r\n    //console.log(result);\r\n    this.setState({ activeItem: result });\r\n  };\r\n\r\n  */\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Unity\\UnityManager.jsx",["114","115","116"],"import React, { Component } from \"react\";\r\nimport \"../../Style/unity.css\"; //.. ===1 ===2\r\nimport ScrollThrough, { leftButton, rightButton } from \"./SlideFunctions.jsx\";\r\n\r\nimport VideoTemplate from \"./VideoTemplate.jsx\";\r\n\r\nclass UnityManager extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = \"Unity Projects\";\r\n  }\r\n\r\n  rightB() {\r\n    const animationHolder = rightButton();\r\n  }\r\n\r\n  leftB() {\r\n    const left = leftButton();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{ minHeight: \"90vh\" }}>\r\n        <h4 style={{ color: \"white\", paddingTop: \"50px\" }}>\r\n          Some basic 2D mechanics I've implemented. Most of the effects aren't\r\n          very polished been more concerned with just making things work.\r\n        </h4>\r\n        <VideoTemplate\r\n          title1={\"Water Effect\"}\r\n          display=\"block\"\r\n          link1={\"https://gyazo.com/6f0b4843a35d9e9bc873834138f506e7\"}\r\n          src1={\"https://i.gyazo.com/6f0b4843a35d9e9bc873834138f506e7.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Dash Effect + UI\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/eebf8899ed544a594a13026ee6518eda\"}\r\n          src1={\"https://i.gyazo.com/eebf8899ed544a594a13026ee6518eda.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Platformer with variable controls\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/f5c29e9e98d8a0819f2e89c1064e5bf3\"}\r\n          src1={\"https://gyazo.com/f5c29e9e98d8a0819f2e89c1064e5bf3.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Lightning Effect\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/3106041ee379747640550dc5eac36b38\"}\r\n          src1={\"https://i.gyazo.com/3106041ee379747640550dc5eac36b38.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Fire Effect\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/f06231dc9ca1497785413492e1fb0178\"}\r\n          src1={\"https://i.gyazo.com/f06231dc9ca1497785413492e1fb0178.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Light Effect\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/45d2df5781e9bb4ff67def58f7609d4e\"}\r\n          src1={\"https://i.gyazo.com/45d2df5781e9bb4ff67def58f7609d4e.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Tile Attack\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/3b654ab210aff608d9cd0180fad21017\"}\r\n          src1={\"https://i.gyazo.com/3b654ab210aff608d9cd0180fad21017.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Unfinished Tile Attack\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/bd262878a22a5a8689c68b8165220123\"}\r\n          src1={\"https://i.gyazo.com/bd262878a22a5a8689c68b8165220123.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Trigonometry Movement\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/13c7a26642eae310c5b3b6d39418088c\"}\r\n          src1={\"https://i.gyazo.com/13c7a26642eae310c5b3b6d39418088c.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Boomerang + Bow\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/ed8954c99a1ea85c881b86de30488574\"}\r\n          src1={\"https://i.gyazo.com/ed8954c99a1ea85c881b86de30488574.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Simple Enemy Walk + Swing\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/3ac5336e7147f059bf8b919d34bd146c\"}\r\n          src1={\"https://i.gyazo.com/3ac5336e7147f059bf8b919d34bd146c.mp4\"}\r\n        />\r\n\r\n        <VideoTemplate\r\n          title1={\"Sword Swing With Trigonometry\"}\r\n          display=\"none\"\r\n          link1={\"https://gyazo.com/74be24c66b5877137069f5b5bc402a33\"}\r\n          src1={\"https://i.gyazo.com/74be24c66b5877137069f5b5bc402a33.mp4\"}\r\n        />\r\n\r\n        <div class=\"caraButtons\">\r\n          <button\r\n            className=\"ui button\"\r\n            onClick={() => this.rightB()} //}  //this.Promise()\r\n          >\r\n            Previous\r\n          </button>\r\n          <button\r\n            className=\"ui button\"\r\n            onClick={() => this.leftB()} //}  //this.Promise()\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UnityManager;\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\NavBar.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\AStar\\PathFinding.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingManager.jsx",["117","118","119","120","121"],"import React, { Component } from \"react\";\r\nimport { BubbleSort } from \"./SortingAlgorithms/BubbleSort.jsx\";\r\nimport { HeapSort } from \"./SortingAlgorithms/HeapSort.jsx\";\r\nimport { MergeSort } from \"./SortingAlgorithms/MergeSort.jsx\";\r\n//import { MergeSort2 } from \"./SortingAlgorithms/MergeSort2.jsx\";\r\nimport { QuickSort } from \"./SortingAlgorithms/QuickSort.jsx\";\r\n\r\n/*\r\nimport \"../.././Style/SortingVisualizer.css\"; // my css\r\nimport \"../.././Style/Tile.css\";\r\nimport \"../.././Style/home.css\";\r\n*/\r\n\r\n// higher = slower\r\nlet ANIMATION_SPEED_MS = 4;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS = 16;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"#2185d0\"; //\"rgba(66, 134, 244, 0.8)\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nlet myArray = [];\r\n\r\nlet sorted = false;\r\n\r\nclass SortingManager extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    NUMBER_OF_ARRAY_BARS = this.maxBars(); //\r\n\r\n    this.state = {\r\n      array: myArray,\r\n      speed: ANIMATION_SPEED_MS,\r\n      size: NUMBER_OF_ARRAY_BARS,\r\n    };\r\n\r\n    sorted = false;\r\n  }\r\n\r\n  maxBars() {\r\n    return (window.innerWidth - 60) / 10;\r\n  }\r\n\r\n  resetArray(noResetBars) {\r\n    let highestTimeoutId = window.setTimeout(function () {}, 0);\r\n    //let highestTimeoutId = setTimeout(\";\");\r\n    for (var i = 0; i < highestTimeoutId; i++) {\r\n      clearTimeout(i);\r\n    }\r\n    let newArray = [];\r\n    //NUMBER_OF_ARRAY_BARS = 16; // remove\r\n    // optional arugment to reset bars in accourdance ot screensize\r\n    if (noResetBars !== true) {\r\n      NUMBER_OF_ARRAY_BARS = this.maxBars();\r\n      // NUMBER_OF_ARRAY_BARS = 16; // remove\r\n      this.setState({ size: NUMBER_OF_ARRAY_BARS });\r\n    }\r\n\r\n    // reset the array\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      newArray.push(randomIntFromInterval(5, 610)); // 30\r\n    }\r\n\r\n    // newArray = [45, 233, 22, 11, 5, 73, 42, 99, 45, 233, 22, 11, 5, 73, 42, 99];\r\n    // enable the speedslider\r\n    this.enableSlider();\r\n\r\n    // set the sorted value\r\n    sorted = false;\r\n\r\n    // make the bars the right colour\r\n    this.SetGreen();\r\n\r\n    // update the array values\r\n    this.setState({ array: newArray });\r\n  }\r\n\r\n  SortingAlgorithms(ourSort) {\r\n    // if our arrayed is already sorted/sorting do this\r\n    if (sorted === true) {\r\n      this.AlreadySortedAnimation();\r\n      return;\r\n    }\r\n    //array = this.state.array;\r\n    // make an array thats equal to the ret urn value of the sort. this also holds the values for our animation swaps\r\n    const animationHolder = ourSort(this.state.array);\r\n\r\n    let timerEnd = animationHolder[0].length;\r\n\r\n    // get all of or bar values\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    // go through all our animations\r\n    for (let i = 0; i < animationHolder[0].length; i++) {\r\n      const barOneIdx = animationHolder[0][i]; // first value\r\n      const barTwoIdx = animationHolder[0][i + 1]; // second value\r\n\r\n      // get styles if arraybars[index] is undefined get null\r\n      const barOneStyle = arrayBars[barOneIdx]\r\n        ? arrayBars[barOneIdx].style\r\n        : {};\r\n\r\n      const barTwoStyle = arrayBars[barTwoIdx]\r\n        ? arrayBars[barTwoIdx].style\r\n        : {};\r\n\r\n      // first timer event\r\n      setTimeout(() => {\r\n        let barOneHeight = barOneStyle.height;\r\n        let barTwoHeight = barTwoStyle.height;\r\n\r\n        let convertPixelToIntOne = parseInt(barOneHeight, 10);\r\n\r\n        let convertPixelToIntTwo = parseInt(barTwoHeight, 10);\r\n\r\n        // if our first bar is > than our second bar swap the two elements\r\n        if (convertPixelToIntOne > convertPixelToIntTwo) {\r\n          // swap values\r\n          let temp = barOneStyle.height;\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }\r\n\r\n        // change the colour to red\r\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n        // end timeouts event (changing the bars back to the original colour once swapped)\r\n        setTimeout(() => {\r\n          // change colour back\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          // once this coumter = 0 we have finished the animation and can do the next steps. we take 2 off the value coz we swap 2 elements\r\n          timerEnd = timerEnd - 2;\r\n          if (timerEnd === 0) {\r\n            // not 100% sure why i have to do this. but its important\r\n            this.setState({ array: animationHolder[1] });\r\n            // enable the slider\r\n            this.enableSlider();\r\n            // play the finish animation method\r\n            this.FinishAnimation();\r\n          }\r\n        }, ANIMATION_SPEED_MS); // second argument for settimeout = the timeout time\r\n      }, i * ANIMATION_SPEED_MS); // linear increasing timeout time based off I from the for loop\r\n\r\n      i = i + 1; // we swapped two elements so we plus 2;\r\n    }\r\n\r\n    // this finishes before the first timeout starts, we already want 1 sort happening so set sorted == true\r\n    sorted = true;\r\n\r\n    // dont want the speed slider moving during the sorting\r\n    this.disableSlider();\r\n  }\r\n\r\n  SortingAlgorithmsMerge(ourSort) {\r\n    // if our arrayed is already sorted/sorting do this\r\n    if (sorted === true) {\r\n      this.AlreadySortedAnimation();\r\n      return;\r\n    }\r\n\r\n    // make an array thats equal to the ret urn value of the sort. this also holds the values for our animation swaps\r\n    const animationHolder = ourSort(this.state.array);\r\n\r\n    let timerEnd = animationHolder[0].length;\r\n\r\n    // get all of or bar values\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    // go through all our animations\r\n    for (let i = 0; i < animationHolder[0].length; i++) {\r\n      const barOneIdx = animationHolder[0][i]; // first value\r\n      const barTwoIdx = animationHolder[0][i + 1]; // second value\r\n      const barThreeIdx = animationHolder[0][i + 2]; // second value\r\n\r\n      // get styles if arraybars[index] is undefined get null\r\n      const barOneStyle = arrayBars[barOneIdx]\r\n        ? arrayBars[barOneIdx].style\r\n        : {};\r\n\r\n      const barTwoStyle = arrayBars[barTwoIdx]\r\n        ? arrayBars[barTwoIdx].style\r\n        : {};\r\n\r\n      let strings = barThreeIdx.toString() + \"px\";\r\n\r\n      // first timer event\r\n      setTimeout(() => {\r\n        // take the bar\r\n        // put it at the start of the array we dont know what the start is unless we pass it through\r\n        // so we need to pass through startvalue and value1\r\n\r\n        barOneStyle.height = strings;\r\n        //barTwoStyle.height = temp;\r\n\r\n        // change the colour to red\r\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n        // end timeouts event (changing the bars back to the original colour once swapped)\r\n        setTimeout(() => {\r\n          // change colour back\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          // once this coumter = 0 we have finished the animation and can do the next steps. we take 2 off the value coz we swap 2 elements\r\n          timerEnd = timerEnd - 3;\r\n          if (timerEnd === 0) {\r\n            // not 100% sure why i have to do this. but its important\r\n            this.setState({ array: animationHolder[1] });\r\n            // enable the slider\r\n            this.enableSlider();\r\n            // play the finish animation method\r\n            this.FinishAnimation();\r\n          }\r\n        }, ANIMATION_SPEED_MS); // second argument for settimeout = the timeout time\r\n      }, i * ANIMATION_SPEED_MS); // linear increasing timeout time based off I from the for loop\r\n\r\n      i = i + 2; // we swapped two elements so we plus 2;\r\n    }\r\n\r\n    // this finishes before the first timeout starts, we already want 1 sort happening so set sorted == true\r\n    sorted = true;\r\n\r\n    // dont want the speed slider moving during the sorting\r\n    this.disableSlider();\r\n  }\r\n\r\n  SortingAlgorithmsQuick(ourSort) {\r\n    // if our arrayed is already sorted/sorting do this\r\n    if (sorted === true) {\r\n      this.AlreadySortedAnimation();\r\n      return;\r\n    }\r\n\r\n    // make an array thats equal to the ret urn value of the sort. this also holds the values for our animation swaps\r\n    const animationHolder = ourSort(this.state.array);\r\n\r\n    let timerEnd = animationHolder[0].length;\r\n\r\n    // get all of or bar values\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    let previosPivot = 0;\r\n    // go through all our animations\r\n    for (let i = 0; i < animationHolder[0].length; i++) {\r\n      const barOneIdx = animationHolder[0][i]; // first value\r\n      const barTwoIdx = animationHolder[0][i + 1]; // second value\r\n      const barThreeIdx = animationHolder[0][i + 2]; // second value\r\n\r\n      // get styles if arraybars[index] is undefined get null\r\n      const barOneStyle = arrayBars[barOneIdx]\r\n        ? arrayBars[barOneIdx].style\r\n        : {};\r\n\r\n      const barTwoStyle = arrayBars[barTwoIdx]\r\n        ? arrayBars[barTwoIdx].style\r\n        : {};\r\n\r\n      const barThreeStyle = arrayBars[barThreeIdx]\r\n        ? arrayBars[barThreeIdx].style\r\n        : {};\r\n\r\n      // first timer event\r\n      setTimeout(() => {\r\n        let indexA = barThreeIdx;\r\n\r\n        let barOneHeight = barOneStyle.height;\r\n        let barTwoHeight = barTwoStyle.height;\r\n\r\n        let convertPixelToIntOne = parseInt(barOneHeight, 10);\r\n\r\n        let convertPixelToIntTwo = parseInt(barTwoHeight, 10);\r\n\r\n        // if our first bar is > than our second bar swap the two elements\r\n        if (convertPixelToIntOne > convertPixelToIntTwo) {\r\n          // swap values\r\n          let temp = barOneStyle.height;\r\n          barOneStyle.height = barTwoStyle.height;\r\n          barTwoStyle.height = temp;\r\n        }\r\n\r\n        // change the colour to red\r\n        if (barOneStyle === barThreeStyle) {\r\n        } else {\r\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n        }\r\n\r\n        if (barTwoStyle === barThreeStyle) {\r\n        } else {\r\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n        }\r\n\r\n        if (previosPivot !== indexA) {\r\n          let barThreeStyle2 = arrayBars[previosPivot].style;\r\n          //barThreeStyle2 = PRIMARY_COLOR;\r\n          previosPivot = indexA;\r\n          barThreeStyle.backgroundColor = \"#FFFFFF\";\r\n        }\r\n\r\n        // end timeouts event (changing the bars back to the original colour once swapped)\r\n        setTimeout(() => {\r\n          // change colour back\r\n\r\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n\r\n          //if (barThreeStyle)\r\n\r\n          // once this coumter = 0 we have finished the animation and can do the next steps. we take 2 off the value coz we swap 2 elements\r\n          timerEnd = timerEnd - 3;\r\n          if (timerEnd === 0) {\r\n            // not 100% sure why i have to do this. but its important\r\n            this.setState({ array: animationHolder[1] });\r\n            // enable the slider\r\n            this.enableSlider();\r\n            // play the finish animation method\r\n            this.FinishAnimation();\r\n          }\r\n        }, ANIMATION_SPEED_MS); // second argument for settimeout = the timeout time\r\n      }, i * ANIMATION_SPEED_MS); // linear increasing timeout time based off I from the for loop\r\n\r\n      i = i + 2; // we swapped two elements so we plus 2;\r\n    }\r\n\r\n    // this finishes before the first timeout starts, we already want 1 sort happening so set sorted == true\r\n    sorted = true;\r\n\r\n    // dont want the speed slider moving during the sorting\r\n    this.disableSlider();\r\n  }\r\n\r\n  // make all bars red going upwards once we finish a sort. it looks cool\r\n  FinishAnimation() {\r\n    // get all bars, we could pass this in as argument from the previos sort method if we wanted\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    let barsLength = arrayBars.length;\r\n    // go through each bar\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      // first timer\r\n      setTimeout(() => {\r\n        //set the first bar = to the chosen colour\r\n        arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\r\n        // lower the count\r\n        barsLength--;\r\n        // if we have no more bars that we need to colour make them all starting colour blue\r\n        if (barsLength === 0) {\r\n          // timer event\r\n          setTimeout(() => {\r\n            // go through each bar and make them blue\r\n            for (let i = 0; i < arrayBars.length; i++) {\r\n              arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n            }\r\n          }, 250); //speed 2nd argument for timeout event\r\n        }\r\n      }, i * 10); // speed 2nd argument for timeout event. make it the delay increase via the loop value I\r\n    }\r\n  }\r\n\r\n  // re-enable the ability to click the speedbar and reset the styles\r\n  enableSlider() {\r\n    let speedBar = document.getElementsByClassName(\"speed\");\r\n    let speedBarStyle = speedBar[0].style;\r\n    speedBarStyle.pointerEvents = \"all\";\r\n    speedBarStyle.backgroundColor = \"#d3d3d3\";\r\n  }\r\n\r\n  // disable the speed slider during sorting animation\r\n  disableSlider() {\r\n    // get speed bar and disable the ability to click it via the pointerevents. this the easiest way to disable\r\n    let speedBar = document.getElementsByClassName(\"speed\");\r\n    let speedBarStyle = speedBar[0].style;\r\n    speedBarStyle.pointerEvents = \"none\";\r\n    speedBarStyle.backgroundColor = \"red\";\r\n  }\r\n\r\n  // if we've trying to sort already sorted data run this animation\r\n  AlreadySortedAnimation() {\r\n    // get bars\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    // go through bars and change colour\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\r\n    }\r\n    setTimeout(() => {\r\n      for (let i = 0; i < arrayBars.length; i++) {\r\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n      }\r\n    }, 500); // change all bars colour to red then after half a second change all colours back to the original colour\r\n  }\r\n\r\n  // set all bars to the colour green\r\n  SetGreen() {\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n    }\r\n  }\r\n\r\n  // not 100% sure we these\r\n\r\n  handleChange(event) {\r\n    ANIMATION_SPEED_MS = event.target.value;\r\n    this.setState({ speed: ANIMATION_SPEED_MS });\r\n  }\r\n\r\n  handleChangeSize(event) {\r\n    NUMBER_OF_ARRAY_BARS = event.target.value;\r\n    this.setState({ size: NUMBER_OF_ARRAY_BARS });\r\n    this.resetArray(true);\r\n  }\r\n\r\n  // reset the array when we create this class\r\n  componentDidMount() {\r\n    document.title = \"Sorting Visualizer\";\r\n\r\n    this.resetArray(true);\r\n  }\r\n\r\n  setStateFunction() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1\r\n          className=\"ui header\"\r\n          style={{\r\n            paddingTop: \"24px\",\r\n            color: \"white\",\r\n            marginTop: \"1px\",\r\n          }}\r\n        >\r\n          Sorting Visualizer\r\n        </h1>\r\n        <div className=\"array-container\">\r\n          {this.state.array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"ui nine column grid blackBC\">\r\n          <div className=\"column black\">\r\n            <h1>Speed</h1>\r\n            <input\r\n              className=\"speed\"\r\n              type=\"range\"\r\n              min=\"4\"\r\n              max=\"100\"\r\n              value={this.state.speed}\r\n              onChange={this.handleChange.bind(this)}\r\n            ></input>\r\n            <div className=\"twoEnds\">\r\n              <div>Fast</div> <div>Slow</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"column black\"></div>\r\n          <div className=\"column black\">\r\n            <h1>Size</h1>\r\n            <input\r\n              type=\"range\"\r\n              className=\"size\"\r\n              min=\"10\"\r\n              max={this.maxBars()}\r\n              value={this.state.size}\r\n              onChange={this.handleChangeSize.bind(this)}\r\n            ></input>\r\n            <div className=\"twoEnds\">\r\n              <div>Small</div> <div> Large</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"column black\"></div>\r\n          <div className=\"column black\">\r\n            <h1>Reset</h1>\r\n            <button\r\n              className=\"ui primary button\"\r\n              onClick={() => this.resetArray()}\r\n            >\r\n              Generate New Array\r\n            </button>\r\n          </div>\r\n          <div className=\"column black\">\r\n            <h3>Merge Sort</h3>\r\n            <button\r\n              className=\"ui button\"\r\n              onClick={() => this.SortingAlgorithmsMerge(MergeSort)} //this.mergeSort()}\r\n            >\r\n              <p>Merge Sort</p>\r\n            </button>\r\n          </div>\r\n          <div className=\"column black\">\r\n            <h3>Quick Sort</h3>\r\n            <button\r\n              className=\"ui button\"\r\n              onClick={() => this.SortingAlgorithms(QuickSort)} //}  //this.Promise()\r\n            >\r\n              <p>Quick Sort </p>\r\n            </button>\r\n          </div>\r\n          <div className=\"column black\">\r\n            <h3>Heap Sort</h3>\r\n            <button\r\n              className=\"ui button\"\r\n              onClick={() => this.SortingAlgorithms(HeapSort)}\r\n            >\r\n              <p>Heap Sort</p>\r\n            </button>\r\n          </div>\r\n          <div className=\"column black\">\r\n            <h3>Bubble Sort</h3>\r\n            <button\r\n              className=\"ui button\"\r\n              onClick={() => this.SortingAlgorithms(BubbleSort)}\r\n            >\r\n              <p>Bubble Sort</p>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortingManager;\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\WebPortfolio\\WebPortfolio.jsx",["122","123","124"],"import \"../../Style/WebPortfolio.css\"; //.. ===1 ===2\r\nimport cs from \"../../Pictures/cs-town-planning.png\";\r\nimport uq from \"../../Pictures/UQ Res.png\";\r\nimport pp from \"../../Pictures/pasta-poetry.png\";\r\nimport gg from \"../../Pictures/gas-guyz.png\";\r\nimport cm from \"../../Pictures/chriss-moss.png\";\r\nimport tp from \"../../Pictures/twitter pic.png\";\r\nimport ap from \"../../Pictures/Apple Clone.png\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Project from \"./CreateProject\";\r\n\r\nfunction Welcome(props) {\r\n  useEffect(() => {\r\n    document.title = \"Web Portfolio\";\r\n  });\r\n\r\n  let messageState = useState(\"sd\");\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <content>\r\n      <h1\r\n        style={{\r\n          color: \"white\",\r\n          backgroundColor: \"black\",\r\n          margin: \"0px\",\r\n          paddingTop: \"25px\",\r\n        }}\r\n      >\r\n        Projects\r\n      </h1>\r\n\r\n      <Project\r\n        backgroundColor={\"black\"}\r\n        titleInfo=\"UQ Residence (University of Queensland)\"\r\n        urlInfo=\"https://uqres.com/\"\r\n        roleInfo=\"Wordspress site\"\r\n        extraInfo=\"Using Starrez API's created the Student booking system for the University of Queensland. It sold out! (500+ rooms). It has seasonal functionality.\"\r\n        projectImage={uq}\r\n      ></Project>\r\n\r\n      <Project\r\n        backgroundColor={\"#131313\"}\r\n        titleInfo=\"Twitter Clone\"\r\n        urlInfo=\"https://twitter-clone-delta-three.vercel.app/\"\r\n        roleInfo=\"NextJS/Firebase Site\"\r\n        extraInfo=\"Log in with Github/Gmail to see a basic CRUD website made with Firebase and NextJS\"\r\n        projectImage={tp}\r\n      ></Project>\r\n\r\n\r\n      <Project\r\n        backgroundColor={\"black\"}\r\n        titleInfo=\"Apple Ecommerce Clone\"\r\n        urlInfo=\"https://appleclone-xavierpurcell.vercel.app/\"\r\n        roleInfo=\"NextJS/Sanity/Stripe Site\"\r\n        extraInfo=\"Created an Ecommerce site that runs using the Stripe API and a Sanity backend.\"\r\n        projectImage={ap}\r\n      ></Project>\r\n\r\n      <Project\r\n        backgroundColor={\"#131313\"}\r\n        titleInfo=\"CS Town Planning\"\r\n        urlInfo=\"https://www.cstownplanning.com.au/\"\r\n        roleInfo=\"Wordpress site\"\r\n        extraInfo=\"Created the site in 5 Weeks for CS Town Planning. Used ACF and custom Gutenberg blocks.\"\r\n        projectImage={cs}\r\n      ></Project>\r\n\r\n      <Project\r\n        backgroundColor={\"black\"}\r\n        titleInfo=\"Gas Guyz\"\r\n        urlInfo=\"https://gasguyz.com.au/\"\r\n        roleInfo=\"Shopify site\"\r\n        extraInfo=\"Added additional features/support using Liquid and JS\"\r\n        projectImage={gg}\r\n      ></Project>\r\n\r\n      <Project\r\n        backgroundColor={\"#131313\"}\r\n        titleInfo=\"Pasta Poetry\"\r\n        urlInfo=\"https://pastapoetry.com.au/\"\r\n        roleInfo=\"Shopify site\"\r\n        extraInfo=\"Customized the site using JS and Liquid.\"\r\n        projectImage={pp}\r\n      ></Project>\r\n\r\n      <Project\r\n        backgroundColor={\"black\"}\r\n        titleInfo=\"Chriss Moss\"\r\n        urlInfo=\"https://www.chrismoss.com.au/\"\r\n        roleInfo=\"Wordpress site\"\r\n        extraInfo=\"Provided Bugfixes/support\"\r\n        projectImage={cm}\r\n      ></Project>\r\n    </content>\r\n  );\r\n}\r\n\r\nexport default Welcome;\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieHome.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Unity\\SlideFunctions.jsx",["125","126"],"export function rightButton() {\r\n  var cards = document.getElementsByClassName(\"unityCard\");\r\n\r\n  // right working\r\n  for (var i = 0; i < cards.length; i++) {\r\n    if (cards.length - 2 - i < 0) {\r\n      break;\r\n    }\r\n\r\n    cards[cards.length - 1 - i].insertAdjacentElement(\r\n      \"afterend\",\r\n      cards[cards.length - 2 - i]\r\n    );\r\n  }\r\n\r\n  enablePosts();\r\n}\r\n\r\nexport function leftButton() {\r\n  var cards = document.getElementsByClassName(\"unityCard\");\r\n\r\n  // left working\r\n\r\n  for (var i = 0; i < cards.length; i++) {\r\n    if (i + 1 === cards.length) {\r\n      break;\r\n    }\r\n    cards[i].insertAdjacentElement(\"beforebegin\", cards[i + 1]);\r\n  }\r\n\r\n  enablePosts();\r\n}\r\n\r\nfunction enablePosts() {\r\n  var video = document.querySelector(\"#vidBox\");\r\n\r\n  video.pause();\r\n  video.currentTime = 0;\r\n  var cards = document.getElementsByClassName(\"unityCard\");\r\n\r\n  // maybe we just want to show 1 post when on a smaller screen but thats a future problem, just leaving here for later\r\n  var width = window.matchMedia(\"(max-width: 1050px)\");\r\n  width = width.matches;\r\n  width = false;\r\n  //\r\n  for (var i = 0; i < cards.length; i++) {\r\n    if (width == true && i < 1) {\r\n      cards[i].style.display = \"block\";\r\n    } else if (i < 1 && width == false) {\r\n      cards[i].style.display = \"block\";\r\n    } else {\r\n      cards[i].style.display = \"none\";\r\n    }\r\n  }\r\n}\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Unity\\VideoTemplate.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\BubbleSort.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\Home\\HomeData.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\HeapSort.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\MergeSort.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\SortingVisualizer\\SortingAlgorithms\\QuickSort.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\MovieList.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\SearchArea.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\MovieInfo.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\Pagination.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\AStar\\NodeGraph.jsx",[],"E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\AStar\\AStar.jsx",["127"],"class AStar {\r\n  constructor(_Nodes, _Width, _Height, _Seeker, _Target, _FillSquare) {\r\n    // set out class varibles up\r\n    this._Nodes = _Nodes;\r\n    this._Width = _Width;\r\n    this._Height = _Height;\r\n    this._Seeker = _Seeker;\r\n    this._Target = _Target;\r\n\r\n    // this is a method passed on from the pathfinding class\r\n    this._FillSquare = _FillSquare;\r\n  }\r\n\r\n  // distance of 2 nodes\r\n  GetDistance(nodeA, nodeB) {\r\n    let dstX = Math.abs(nodeA._gridX - nodeB._gridX); // abs = if negative remove the negative sign\r\n    let dstY = Math.abs(nodeA._gridY - nodeB._gridY);\r\n\r\n    if (dstX > dstY) {\r\n      return 14 * dstY + 10 * (dstX - dstY);\r\n    } else {\r\n      return 14 * dstX + 10 * (dstY - dstX);\r\n    }\r\n  }\r\n\r\n  // get neighbours\r\n  getNeighbours(nodeItem) {\r\n    let neighbours = [];\r\n\r\n    for (let x = -1; x <= 1; x++) {\r\n      for (let y = -1; y <= 1; y++) {\r\n        if (x === 0 && y === 0) {\r\n          continue;\r\n        }\r\n\r\n        //diagnoal movement stop\r\n        if (x === -1 && y === -1) {\r\n          continue;\r\n        }\r\n\r\n        if (x === 1 && y === 1) {\r\n          continue;\r\n        }\r\n\r\n        if (x === 1 && y === -1) {\r\n          continue;\r\n        }\r\n        if (x === -1 && y === 1) {\r\n          continue;\r\n        }\r\n\r\n        let checkX = nodeItem._gridX + x;\r\n        let checkY = nodeItem._gridY + y;\r\n\r\n        // 00 = node[0] 1 0 = node[1] 0 1 = node [30]\r\n\r\n        // 30 is the blocksize\r\n        if (\r\n          checkX >= 0 &&\r\n          checkX < this._Width / 30 &&\r\n          checkY >= 0 &&\r\n          checkY < this._Height / 30\r\n        ) {\r\n          let correctNode = (this._Width / 30) * checkY + checkX;\r\n\r\n          neighbours.push(this._Nodes[correctNode]); // array of nodes\r\n        }\r\n      }\r\n    } // end of for loop\r\n    return neighbours;\r\n  }\r\n\r\n  FindPath(myCanvas, Seeker, Target) {\r\n    this._myCanvas = myCanvas;\r\n    let startNode = this._Nodes[Seeker];\r\n    let targetNode = this._Nodes[Target];\r\n\r\n    let openSet = [];\r\n    let closedSet = [];\r\n    openSet.push(startNode);\r\n\r\n    let foundPath = false;\r\n\r\n    let j = -1;\r\n    while (openSet.length > 0) {\r\n      let currentNode = openSet[0];\r\n      // start at 1 to ignore the starting block\r\n      for (let i = 1; i < openSet.length; i++) {\r\n        if (\r\n          openSet[i].fCost() < currentNode.fCost() ||\r\n          (openSet[i].fCost() === currentNode.fCost() &&\r\n            openSet[i].hCost < currentNode.hCost)\r\n        ) {\r\n          // currentNode is the small fcost??\r\n          currentNode = openSet[i];\r\n        }\r\n      }\r\n\r\n      let index = openSet.indexOf(currentNode);\r\n      openSet.splice(index, 1); // remove node\r\n      closedSet.push(currentNode);\r\n\r\n      if (currentNode === targetNode) {\r\n        foundPath = true;\r\n        break;\r\n      }\r\n\r\n      let neighbour = this.getNeighbours(currentNode);\r\n      for (let i = 0; i < neighbour.length; i++) {\r\n        //grid.DrawTiles(neighbour.gridPosition, grid.blueTile);\r\n\r\n        if (\r\n          neighbour[i]._walkNode === false ||\r\n          closedSet.includes(neighbour[i])\r\n        ) {\r\n          continue; // go to next iteration this neighbour cant bse used due to it being an obstacle or already walked on (we dont want an endless loop of neighbours)\r\n        }\r\n\r\n        //animations\r\n        setTimeout(() => {\r\n          if (neighbour[i] !== targetNode) {\r\n            this._FillSquare(neighbour[i]._gridX, neighbour[i]._gridY, \"white\");\r\n          }\r\n\r\n          if (foundPath === true && neighbour[i] === targetNode) {\r\n            this.RetracePath(startNode, targetNode);\r\n          }\r\n        }, 15 * j); // second argument for settimeout = the timeout time\r\n        // end of animations\r\n\r\n        let distance = this.GetDistance(currentNode, neighbour[i]);\r\n\r\n        let newMovementCostToNeighbour = currentNode.gCost + distance;\r\n        // multiple ways to get to a nod if it isnt less it isnt optimal way to get to said node so we can skip. furthermore if this node has already been added to the openset dont add it again otherwise\r\n\r\n        if (\r\n          newMovementCostToNeighbour < neighbour[i].gCost ||\r\n          openSet.includes(neighbour[i]) === false\r\n        ) {\r\n          neighbour[i].gCost = newMovementCostToNeighbour;\r\n          neighbour[i].hCost = this.GetDistance(neighbour[i], targetNode);\r\n          neighbour[i]._parent = currentNode;\r\n          //neighbour = this.getNeighbours(currentNode);\r\n\r\n          if (openSet.includes(neighbour[i]) === false) {\r\n            j++;\r\n            openSet.push(neighbour[i]);\r\n          }\r\n        }\r\n      }\r\n    } // end of while\r\n  } // end of findpath\r\n\r\n  RetracePath(startNode, endNode) {\r\n    let path = [];\r\n    let currentNode = endNode; // can minus 1 if we want ot overwrite the start\r\n\r\n    while (currentNode !== startNode) {\r\n      path.push(currentNode);\r\n      if (currentNode._parent === undefined) {\r\n        break;\r\n      }\r\n      currentNode = currentNode._parent;\r\n    }\r\n    //path.Reverse();\r\n    let path2 = path.reverse();\r\n    // the path.length-1 = we dont overwrite the end\r\n    for (let i = 0; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        this._FillSquare(path2[i]._gridX, path2[i]._gridY, \"#2185d0\");\r\n      }, 25 * i);\r\n    }\r\n  } // end of retrace path\r\n} // end of class\r\n\r\nexport default AStar;\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\WebPortfolio\\CreateProject.jsx",["128"],"let CreateProject = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: props.backgroundColor,\r\n        color: \"white\",\r\n        paddingTop: \"50px\",\r\n        paddingBottom: \"50px\",\r\n      }}\r\n    >\r\n      <div style={{ maxWidth: \"800px\", margin: \"auto\" }}>\r\n        <div>\r\n          <h2> {props.titleInfo}</h2>\r\n          <h3>\r\n            <a href={props.urlInfo}>{props.urlInfo}</a>\r\n          </h3>\r\n          <h4>{props.roleInfo}</h4>\r\n          {props.extraInfo !== \"\" ? <h4>{props.extraInfo}</h4> : \"\"}\r\n        </div>\r\n        <img\r\n          src={props.projectImage}\r\n          style={{ maxWidth: \"800px\", marginTop: \"50px\" }}\r\n        ></img>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateProject;\r\n","E:\\web dev\\React\\React-Projects\\portfolio\\src\\components\\MovieAPI\\MovieComponents\\Movie.jsx",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":20,"column":5,"nodeType":"135","messageId":"136","endLine":20,"endColumn":11},{"ruleId":"137","severity":1,"message":"138","line":27,"column":3,"nodeType":"139","messageId":"140","endLine":29,"endColumn":4},{"ruleId":"133","severity":1,"message":"141","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":21},{"ruleId":"133","severity":1,"message":"142","line":19,"column":11,"nodeType":"135","messageId":"136","endLine":19,"endColumn":26},{"ruleId":"133","severity":1,"message":"143","line":23,"column":11,"nodeType":"135","messageId":"136","endLine":23,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":112,"column":18,"nodeType":"146","messageId":"147","endLine":148,"endColumn":8},{"ruleId":"144","severity":1,"message":"145","line":193,"column":18,"nodeType":"146","messageId":"147","endLine":221,"endColumn":8},{"ruleId":"144","severity":1,"message":"148","line":269,"column":18,"nodeType":"146","messageId":"147","endLine":325,"endColumn":8},{"ruleId":"133","severity":1,"message":"149","line":299,"column":15,"nodeType":"135","messageId":"136","endLine":299,"endColumn":29},{"ruleId":"144","severity":1,"message":"150","line":345,"column":18,"nodeType":"146","messageId":"147","endLine":360,"endColumn":8},{"ruleId":"133","severity":1,"message":"151","line":17,"column":7,"nodeType":"135","messageId":"136","endLine":17,"endColumn":19},{"ruleId":"133","severity":1,"message":"152","line":18,"column":10,"nodeType":"135","messageId":"136","endLine":18,"endColumn":15},{"ruleId":"133","severity":1,"message":"153","line":18,"column":17,"nodeType":"135","messageId":"136","endLine":18,"endColumn":25},{"ruleId":"154","severity":1,"message":"155","line":47,"column":15,"nodeType":"156","messageId":"157","endLine":47,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":49,"column":31,"nodeType":"156","messageId":"157","endLine":49,"endColumn":33},{"ruleId":"144","severity":1,"message":"158","line":120,"column":20,"nodeType":"146","messageId":"147","endLine":128,"endColumn":10},{"ruleId":"159","severity":1,"message":"160","line":20,"column":9,"nodeType":"161","endLine":23,"endColumn":10},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'limitS' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'ScrollThrough' is defined but never used.","'animationHolder' is assigned a value but never used.","'left' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'timerEnd', 'timerEnd', 'timerEnd', 'ANIMATION_SPEED_MS'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'previosPivot', 'previosPivot', 'previosPivot', 'timerEnd', 'timerEnd', 'timerEnd', 'ANIMATION_SPEED_MS'.","'barThreeStyle2' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'barsLength', 'barsLength'.","'messageState' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Function declared in a loop contains unsafe references to variable(s) 'foundPath'.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]